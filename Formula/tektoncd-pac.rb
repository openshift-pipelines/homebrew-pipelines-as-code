# typed: false
# frozen_string_literal: true

# This file was generated by GoReleaser. DO NOT EDIT.
class TektoncdPac < Formula
  desc "Tekton PAC - The command line interface for interacting with Pipelines as Code"
  homepage "https://github.com/openshift-pipelines/pipelines-as-code"
  version "0.4.1"
  bottle :unneeded

  on_macos do
    url "https://github.com/openshift-pipelines/pipelines-as-code/releases/download/0.4.1/tkn-pac_0.4.1_MacOS_all.tar.gz"
    sha256 "cf9cb78786bd16b2540daf61a571f514ebc81adf24b2f89169b9ba6529e97431"
  end

  on_linux do
    if Hardware::CPU.intel?
      url "https://github.com/openshift-pipelines/pipelines-as-code/releases/download/0.4.1/tkn-pac_0.4.1_Linux_x86_64.tar.gz"
      sha256 "80eb3d8e9a570836f32eb110567f81dbb8e4a906a9d1d9d490824794cc87a61f"
    end
    if Hardware::CPU.arm? && Hardware::CPU.is_64_bit?
      url "https://github.com/openshift-pipelines/pipelines-as-code/releases/download/0.4.1/tkn-pac_0.4.1_Linux_arm64.tar.gz"
      sha256 "f70e6b5c069c9e4998662db8a94a2ea3bfd8b10ee9df4200a99b26179c9f745c"
    end
  end

  depends_on "tektoncd-cli" => :optional
  depends_on "git"

  def install
    bin.install "tkn-pac" => "tkn-pac"
    output = Utils.popen_read("SHELL=bash #{bin}/tkn-pac completion bash")
    (bash_completion/"tkn-pac").write output
    output = Utils.popen_read("SHELL=zsh #{bin}/tkn-pac completion zsh")
    (zsh_completion/"_tkn-pac").write output
    prefix.install_metafiles
  end
end
