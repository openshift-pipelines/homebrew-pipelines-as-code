# typed: false
# frozen_string_literal: true

# This file was generated by GoReleaser. DO NOT EDIT.
class TektoncdPac < Formula
  desc "Tekton PAC - The command line interface for interacting with Pipelines as Code"
  homepage "https://github.com/openshift-pipelines/pipelines-as-code"
  version "0.4.1"
  bottle :unneeded

  on_macos do
    url "https://github.com/openshift-pipelines/pipelines-as-code/releases/download/0.4.1/tkn-pac_0.4.1_MacOS_all.tar.gz"
    sha256 "92901cefb0768f789bbdf95ff419826bbe8e448b394d2b26d7e9c45040f870b2"
  end

  on_linux do
    if Hardware::CPU.intel?
      url "https://github.com/openshift-pipelines/pipelines-as-code/releases/download/0.4.1/tkn-pac_0.4.1_Linux_x86_64.tar.gz"
      sha256 "000272a0506790374d20c28aece26e363e45967aa7ba5cf325069e2ef30d3f41"
    end
    if Hardware::CPU.arm? && Hardware::CPU.is_64_bit?
      url "https://github.com/openshift-pipelines/pipelines-as-code/releases/download/0.4.1/tkn-pac_0.4.1_Linux_arm64.tar.gz"
      sha256 "a05e7a7b9a2462696f64f5af41378a498c7fca5b9ca36439d4758bac5d0605c2"
    end
  end

  depends_on "tektoncd-cli" => :optional
  depends_on "git"

  def install
    bin.install "tkn-pac" => "tkn-pac"
    output = Utils.popen_read("SHELL=bash #{bin}/tkn-pac completion bash")
    (bash_completion/"tkn-pac").write output
    output = Utils.popen_read("SHELL=zsh #{bin}/tkn-pac completion zsh")
    (zsh_completion/"_tkn-pac").write output
    prefix.install_metafiles
  end
end
