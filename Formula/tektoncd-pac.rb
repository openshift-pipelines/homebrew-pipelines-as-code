# typed: false
# frozen_string_literal: true

# This file was generated by GoReleaser. DO NOT EDIT.
class TektoncdPac < Formula
  desc "Tekton PAC - The command line interface for interacting with Pipelines as Code"
  homepage "https://github.com/openshift-pipelines/pipelines-as-code"
  version "0.4.2"
  bottle :unneeded

  on_macos do
    url "https://github.com/openshift-pipelines/pipelines-as-code/releases/download/0.4.2/tkn-pac_0.4.2_MacOS_all.tar.gz"
    sha256 "3336db2abfcaca5d32d868468739eab16953f0a1500116658b767a3d5c5c50fd"
  end

  on_linux do
    if Hardware::CPU.intel?
      url "https://github.com/openshift-pipelines/pipelines-as-code/releases/download/0.4.2/tkn-pac_0.4.2_Linux_x86_64.tar.gz"
      sha256 "c11972d28efa2a9902a373857f09d8cbb3895d6a8350a550499cb569d650b171"
    end
    if Hardware::CPU.arm? && Hardware::CPU.is_64_bit?
      url "https://github.com/openshift-pipelines/pipelines-as-code/releases/download/0.4.2/tkn-pac_0.4.2_Linux_arm64.tar.gz"
      sha256 "7762205b5a03c077293db41a48cb95e44cb616adf8ef91f0b2548fe7ae5dfe58"
    end
  end

  depends_on "tektoncd-cli" => :optional
  depends_on "git"

  def install
    bin.install "tkn-pac" => "tkn-pac"
    output = Utils.popen_read("SHELL=bash #{bin}/tkn-pac completion bash")
    (bash_completion/"tkn-pac").write output
    output = Utils.popen_read("SHELL=zsh #{bin}/tkn-pac completion zsh")
    (zsh_completion/"_tkn-pac").write output
    prefix.install_metafiles
  end
end
